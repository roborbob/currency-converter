{"version":3,"sources":["config.js","components/dropDownContainer.js","components/select.js","containers/currencySelector.js","containers/currencyCalculator.js","containers/historicalRates.js","App.js","serviceWorker.js","index.js"],"names":["config","AUD","name","BGN","BRL","CAD","CHF","CNY","CZK","DKK","EUR","GBP","HKD","HRK","HUF","IDR","ILS","INR","ISK","JPY","KRW","MXN","MYR","NOK","NZD","PHP","PLN","RON","RUB","SEK","SGD","THB","TRY","USD","ZAR","ListItemStyle","styled","div","flagStyle","width","height","ListItem","props","onClick","clicked","style","svg","countryCode","code","slice","className","SelectWrapper","SelectContainer","DropDownContainer","toggle","InputContainer","input","Select","useState","toggleSelling","toggleBuying","setToggle","initialRate","rate","setRate","left","setLeft","Number","toFixed","right","setRight","flag","currencyCode","currency","selling","setSelling","buying","setBuying","updateRate","a","b","axios","result","Object","values","data","rates","fetchData","transform","prevToggle","rateData","map","e","key","Math","random","focus","type","value","onChange","target","CurrencySelector","localStorage","getItem","useEffect","keys","length","console","log","setItem","JSON","stringify","results","parse","listData","i","push","sort","SelectorWrapper","CurrencyCalculator","HistoricalRates","App","Container","main","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.aa78508b.chunk.js","sourcesContent":["export const config = {\n    AUD: {\n        name:`Australian Dollar`,\n    },\n    BGN: {\n        name:`Bulgarian Lev`,\n    },\n    BRL: {\n        name:`Brazilian Real`,\n    },\n    CAD: {\n        name:`Canadian Dollar`,\n    },\n    CHF: {\n        name:`Swiss Franc`,\n    },\n    CNY: {\n        name:`Chinese Yen`,\n    },\n    CZK: {\n        name:`Czech Koruna`,\n    },\n    DKK: {\n        name:`Danish Krone`,\n    },\n    EUR: {\n        name:`Euro`,\n    },\n    GBP: {\n        name: `British Pound`,\n    },\n    HKD: {\n        name:`Hong Kong Dollar`,\n    },\n    HRK: {\n        name:`Croatian Kuna`,\n    },\n    HUF:{\n        name:`Hungarian Forint`,\n    },\n    IDR: {\n        name:`Indonesian Rupiah`,\n    },\n    ILS: {\n        name:`Israeli Shekel`,\n    },\n    INR: {\n        name:`Indian Rupee`,\n    },\n    ISK: {\n        name:`Icelandic Krona`,\n    },\n    JPY: {\n        name:`Japanese Yen`,\n    },\n    KRW: {\n        name:`South Korean Won`,\n    },\n    MXN: {\n        name:`Mexican Peso`,\n    },\n    MYR: {\n        name:`Malaysian Ringgit`,\n    },\n    NOK: {\n        name:`Norwegian Krone`,\n    },\n    NZD: {\n        name:`New Zealand Dollar`,\n    },\n    PHP: {\n        name:`Philippene Peso`,\n    },\n    PLN: {\n        name:`Polish Zloty`,\n    },\n    RON: {\n        name:`Romanian Leu`,\n    },\n    RUB: {\n        name:`Russian Ruble`,\n    },\n    SEK: {\n        name:`Swedish Krona`,\n    },\n    SGD: {\n        name:`Singapore Dollar`,\n    },\n    THB: {\n        name:`Thai Bhat`,\n    },\n    TRY: {\n        name:`Turkish Lira`,\n    },\n    USD: {\n        name:`United States Dollar`,\n    },\n    ZAR: {\n        name:`South African Rand`,\n    },\n\n}","import React from 'react';\nimport styled from 'styled-components';\nimport ReactCountryFlag from 'react-country-flag';\nimport {config} from '../config';\n\nconst ListItemStyle = styled.div`\n    position: relative;\n    border-top: 1px solid silver;\n    border-radius: 0px;\n    transition: 0.3s;\n    background: rgba(255,255,255,0.7);\n    box-sizing: border-box;\n    display: flex;\n    justify-content: flex-start;\n    flex-direction: row;\n    width: 270px;\n    height: 60px;\n    border: none;\n    background: white;\n    padding: 10px;\n    &:hover{\n        background: lightblue;\n        cursor: pointer;\n    }\n    .currency-tags{\n        width: fit-content;\n        padding-left: 20px;\n        display: flex;\n        flex-direction: column;\n        p:first-of-type{\n            font-size: 20px;\n            font-weight: bold;\n            margin: 0;\n        }\n        p{\n            font-size: 14px;\n            font-weight: regular;\n            letter-spacing: 1.2px;\n        }\n    }\n`\n\nconst flagStyle = {\n    width: `50px`,\n    height: `100%`,\n}\n\nfunction ListItem(props){\n    return (   \n                <ListItemStyle onClick={props.clicked}>\n                    <ReactCountryFlag style={flagStyle} svg countryCode={props.code.slice(0,2)}/>\n                    <div className='currency-tags'>\n                        <p>{props.code}</p>\n                        <p>{config[props.code].name}</p>\n                    </div>\n                </ListItemStyle>\n    )\n}           \n\nexport default ListItem;\n\n","import React, {useState, useEffect} from 'react';\nimport styled from 'styled-components';\nimport ListItem from './dropDownContainer';\nimport axios from 'axios';\nimport {MdSwapHoriz, MdExpandMore} from 'react-icons/md';\nimport ReactCountryFlag from 'react-country-flag';\nimport {config} from '../config';\n\nfunction Select(props) {\n    const [toggle, setToggle] = useState({toggleSelling: false, toggleBuying: false});\n    const [rate, setRate] = useState(props.initialRate)\n    const [left, setLeft] = useState(`1.00`)\n    const [right, setRight] = useState((Number(left)*rate).toFixed(2))\n    const [selling, setSelling] = useState({\n            flag: `GB`,\n            currencyCode: `GBP`,\n            currency: `British Pounds`,\n    })\n    const[buying, setBuying] = useState({\n            flag: `EU`,\n            currencyCode: `EUR`,\n            currency: `Euro`,\n    }) \n\n    const sellingHandler = (key) => {\n        setSelling({\n            flag: key.slice(0,2),\n            currencyCode: key,\n            currency: config[key].name\n        })\n        updateRate(key,buying.currencyCode)\n        setToggle(prevToggle => ({toggleSelling: false, toggleBuying: prevToggle.toggleBuying}))\n    }\n    const buyingHandler = (key) => {\n        setBuying({\n            flag: key.slice(0,2),\n            currencyCode: key,\n            currency: config[key].name\n        })\n        updateRate(selling.currencyCode,key)\n        setToggle(prevToggle => ({toggleSelling: prevToggle.toggleSelling, toggleBuying: false}))\n    }\n\n    const swapHandler = () => {\n        setBuying(selling)\n        setSelling(buying)\n        updateRate(selling.currencyCode,buying.currencyCode)     \n    }\n\n    const updateRate = (a,b) => {\n        const fetchData = async () => {\n            const result = await axios(\n                `https://api.exchangeratesapi.io/latest?base=${a}&symbols=${b}`\n            )\n            setRate(Object.values(result.data.rates)[0])\n        } \n        fetchData();\n        setRight((left*rate).toFixed(2))\n    }\n\n    return (\n\n         <SelectWrapper>\n            <SelectContainer>\n                <ReactCountryFlag style={flagStyle} svg countryCode={selling.flag}/>\n                <div className='currency-tags'>\n                    <p>{selling.currencyCode}</p>\n                    <p>{selling.currency}</p>\n                </div>\n                <MdExpandMore \n                    style={{transform: toggle.toggleSelling ? `rotate(180deg)` : `rotate(0deg)`}} \n                    onClick={() => setToggle(prevToggle => ({toggleSelling: !prevToggle.toggleSelling, toggleBuying: prevToggle.toggleBuying}))}/>\n                 <DropDownContainer toggle={toggle.toggleSelling}>\n                     {props.rateData.map( e => (\n                         <ListItem \n                            key={Math.random()}\n                            clicked={() => sellingHandler(e)}\n                            code={e}\n                         />\n                     ))}\n                </DropDownContainer>                \n            </SelectContainer>\n            <MdSwapHoriz style={flagStyle} onClick={swapHandler}/>\n            <SelectContainer>\n                <ReactCountryFlag style={flagStyle} svg countryCode={buying.flag}/>\n                <div className='currency-tags'>\n                    <p>{buying.currencyCode}</p>\n                    <p>{buying.currency}</p>\n                </div>\n                <MdExpandMore \n                    style={{transform: toggle.toggleBuying ? `rotate(180deg)` : `rotate(0deg)`}} \n                    onClick={() => setToggle(prevToggle => ({toggleSelling: prevToggle.toggleSelling, toggleBuying:!prevToggle.toggleBuying}))}/>\n                <DropDownContainer toggle={toggle.toggleBuying}>\n                    {props.rateData.map( e => (\n                        <ListItem \n                            key={Math.random()}\n                            clicked={() => buyingHandler(e)}\n                            code={e}\n                        />\n                    ))}\n                </DropDownContainer>\n            </SelectContainer>\n            <InputContainer focus type=\"text\" value={left} onChange={(e) => {\n                setRight(((e.target.value)*rate).toFixed(2))\n                setLeft(e.target.value)\n                }\n            }/>\n            <MdSwapHoriz style={flagStyle}/>\n            <InputContainer type=\"text\" value={right} onChange={(e) => {\n                setLeft(((e.target.value)/rate).toFixed(2))\n                setRight(e.target.value)\n                }\n            }/>\n        </SelectWrapper>\n    )\n}\n\n\nconst pointerStyle = {\n    width: `30px`,\n    height: `30px`\n}\nconst flagStyle = {\n    width: `50px`,\n    height: `100%`,\n}\n\nconst SelectWrapper = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n`\n\nconst SelectContainer = styled.div`\n    position: relative;\n    box-sizing: border-box;\n    display: flex;\n    justify-content: flex-start;\n    flex-direction: row;\n    width: 270px;\n    height: 60px;\n    border-radius: 5px;\n    border: none;\n    background: white;\n    padding: 10px;\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.31);\n    .currency-tags{\n        width: fit-content;\n        padding-left: 20px;\n        display: flex;\n        flex-direction: column;\n        p:first-of-type{\n            font-size: 20px;\n            font-weight: bold;\n            margin: 0;\n        }\n        p{\n            font-size: 14px;\n            font-weight: regular;\n            letter-spacing: 1.2px;\n        }\n    }\n    svg{\n        position: absolute;\n        align-self: center;\n        width: 30px;\n        right: 15px;\n        transition: 0.3s;\n        &:hover{\n            cursor: pointer;\n            transform: scale(1.2);\n        }\n    }\n`\nconst DropDownContainer = styled.div`\n    position: absolute;\n    top: 60px;\n    left: 0;\n    width: 270px;\n    overflow: scroll;\n    z-index: 100;\n    background: none;\n    border-radius: 5px;\n    transition: 0.2s;\n    height: ${props => props.toggle ? `240px` : `0px` }\n`\nconst InputContainer = styled.input`\n    width: 270px;\n    height: 60px;\n    border-radius: 5px;\n    border: none;\n    background: white;\n    padding: 10px;\n    margin-top: 10px;\n    font-size: 20px;\n    font-weight: regular;\n    font-family: 'Helvetica Neue';\n`\nexport default Select;","import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport styled from 'styled-components';\nimport Select from '../components/select';\n\nexport default function CurrencySelector(){\n    const initialRates = () => localStorage.getItem('rates') || {};\n    const [data, setData] = useState(initialRates)\n\n    useEffect(() => {\n        if(Object.keys(data).length !== 0){\n            console.log('Using local storage')\n        } else {\n            console.log('calling api')\n            const fetchData = async () => {\n                const result = await axios(\n                    'https://api.exchangeratesapi.io/latest?base=GBP'\n                )\n                localStorage.setItem('rates',JSON.stringify(result.data.rates))\n            } \n            fetchData();\n        }\n    }, [data]);\n\n    let results = JSON.parse(data)\n    let listData = []\n    for(let i in results){\n        listData.push(i)\n    }\n    listData.sort()\n\n    return (\n        <SelectorWrapper>\n            <p>Select the currency you have and the currency you would like to buy.</p>\n            <Select rateData={listData} initialRate={results.EUR}/>\n            \n        </SelectorWrapper>\n\n    )\n}\n\nconst SelectorWrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    margin: 200px auto;\n    p {\n        font-family: 'Helvetica Neue';\n        font-size: 20px;\n        font-weight: 300;\n        text-align: left;\n        margin-bottom: 20px;\n    }\n`","import React from 'react';\n\nconst CurrencyCalculator = () => {\n    return <h2>Currency Calculator</h2>\n}\n\nexport default CurrencyCalculator;\n\n","import React from 'react';\n\nexport default function HistoricalRates() {\n    return <h2>Historical Rates</h2>\n}","import React from 'react';\nimport CurrencySelector from './containers/currencySelector';\nimport CurrencyCalculator from './containers/currencyCalculator';\nimport HistoricalRates from './containers/historicalRates';\nimport styled from 'styled-components';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container>\n        <h1>Currency Converter</h1>\n        <CurrencySelector/>\n        <CurrencyCalculator/>\n        <HistoricalRates/>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n\nconst Container = styled.main`\n  display: block;\n  width: 650px;\n  margin: auto;\n  padding: 0;\n  text-align: center;\n  h1 {\n    margin-top: 50px;\n    font-family: 'Helvetica Neue';\n    font-weight: 300;\n    letter-spacing: 1.2px;\n  }\n`","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}